[{"categories":[],"content":"文本处理 var=appletcat # 从x位开始的n个字节 echo ${var:3:2} # 长度 echo ${#var} # 变量保护 dir1=\"/home\" dir2= echo \"path1 : ${dir}/${dir2}\" echo \"path2 : ${dir}/${dir2:?\"dir2_is_null\"}\" ","date":"2023-06-05","objectID":"/2023/06/shell%E6%97%A5%E5%B8%B8%E6%8A%80%E5%B7%A7%E6%95%B4%E7%90%86/:1:0","tags":[],"title":"Shell日常使用技巧整理","uri":"/2023/06/shell%E6%97%A5%E5%B8%B8%E6%8A%80%E5%B7%A7%E6%95%B4%E7%90%86/"},{"categories":[],"content":"sed sentence=\"He ate an apple before.\" echo $sentence | sed 's/apple/banana/g' echo $sentence | sed \"s/apple/banana/g\" v=pear # 使用变量必须使用：{}，并用双引号 echo $sentence | sed \"s/apple/${v}/g\" # 使用多个匹配 echo $sentence | sed -e \"s/apple/banana/g\" -e \"s/He/Dog/g\" # 保留关键字，使用()，\\x echo $sentence | sed \"s/He\\s\\(.*\\) before./\\1/g\" # 过滤文件中的空行： sed -e '/^$/d' ","date":"2023-06-05","objectID":"/2023/06/shell%E6%97%A5%E5%B8%B8%E6%8A%80%E5%B7%A7%E6%95%B4%E7%90%86/:2:0","tags":[],"title":"Shell日常使用技巧整理","uri":"/2023/06/shell%E6%97%A5%E5%B8%B8%E6%8A%80%E5%B7%A7%E6%95%B4%E7%90%86/"},{"categories":[],"content":"前后缀 # 路径前缀后缀 path=/Users/Joe/nginx/conf dirname $path basename $path # 获取文件名及后缀 ff=build.xml # 前缀名 echo ${ff%.*} # 后缀名 echo ${ff##*.} ","date":"2023-06-05","objectID":"/2023/06/shell%E6%97%A5%E5%B8%B8%E6%8A%80%E5%B7%A7%E6%95%B4%E7%90%86/:3:0","tags":[],"title":"Shell日常使用技巧整理","uri":"/2023/06/shell%E6%97%A5%E5%B8%B8%E6%8A%80%E5%B7%A7%E6%95%B4%E7%90%86/"},{"categories":[],"content":"用${}分别替换得到不同的值 #去掉左边（键盘上#在`$的左边） %去掉右边（键盘上%在$`的右边） 单一符号是最小匹配；两个符号是最大匹配 file=/dir1/dir2/dir3/my.file.txt # 删掉第一个 / 及其左边的字符串：dir1/dir2/dir3/my.file.txt echo ${file#*/} # 删掉最后一个/及其左边的字符串：my.file.txt echo ${file##*/} # 删掉第一个 . 及其左边的字符串：file.txt echo ${file#*.} # 删掉最后一个 . 及其左边的字符串：txt echo ${file##*.} # 删掉最后一个 / 及其右边的字符串：/dir1/dir2/dir3 echo ${file%/*} # 删掉第一个 / 及其右边的字符串：(空值) echo ${file%%/*} # 删掉最后一个 . 及其右边的字符串：/dir1/dir2/dir3/my.file echo ${file%.*} # 删掉第一个 . 及其右边的字符串：/dir1/dir2/dir3/my echo ${file%%.*} 排序去重 # 按第2位排重 csv=\"apple|1482|count banana|832|sum test|97|if good|832|over\" echo \"$csv\" | awk -F'|' '!row[$2]++' # 按照指定列排重 # -t指定分隔符，-k指定列范围（如果从第1列起到第1列结束） sort -t ',' -u -k 1,1 test.csv # 排除第4列为空的行 cat test.csv | awk -F',' '{if($4!=\"\") {print $0}}' ","date":"2023-06-05","objectID":"/2023/06/shell%E6%97%A5%E5%B8%B8%E6%8A%80%E5%B7%A7%E6%95%B4%E7%90%86/:4:0","tags":[],"title":"Shell日常使用技巧整理","uri":"/2023/06/shell%E6%97%A5%E5%B8%B8%E6%8A%80%E5%B7%A7%E6%95%B4%E7%90%86/"},{"categories":[],"content":"时间 # 格式化输出 date +'%Y-%m-%d %H:%M:%S' # 某时间 date -d \"1 day ago\" # 1970秒 secs=`date +%s` date -d \"0:0:0 1970-01-01 ${secs}sec\" date -d \"1970-01-01 ${secs}sec\" +\"%Y-%m-%d %H:%M:%S\" date -d \"0:0:0 1970-01-01 ${secs}sec 123 mins ago UTC\" +\"%Y-%m-%d %H:%M:%S\" ","date":"2023-06-05","objectID":"/2023/06/shell%E6%97%A5%E5%B8%B8%E6%8A%80%E5%B7%A7%E6%95%B4%E7%90%86/:5:0","tags":[],"title":"Shell日常使用技巧整理","uri":"/2023/06/shell%E6%97%A5%E5%B8%B8%E6%8A%80%E5%B7%A7%E6%95%B4%E7%90%86/"},{"categories":[],"content":"数组 ARRAY=( a1 b2 c3 c4 ) for mod in ${ARRAY[@]} do echo ${mod} done ","date":"2023-06-05","objectID":"/2023/06/shell%E6%97%A5%E5%B8%B8%E6%8A%80%E5%B7%A7%E6%95%B4%E7%90%86/:6:0","tags":[],"title":"Shell日常使用技巧整理","uri":"/2023/06/shell%E6%97%A5%E5%B8%B8%E6%8A%80%E5%B7%A7%E6%95%B4%E7%90%86/"},{"categories":[],"content":"命令 # 执行命令获取返回的2种写法 echo `uname -a` echo $(uname -a) # 获取自身PID echo $$ # 变量算术运算 i=10 echo $((i*3/5)) # 循环的2种写法 for((i=0;i\u003c4;i++)) do echo \"\u003e $i\" done i=0 while [ $i -lt 4 ] do echo \"+ $i\" $((i+1)) done ","date":"2023-06-05","objectID":"/2023/06/shell%E6%97%A5%E5%B8%B8%E6%8A%80%E5%B7%A7%E6%95%B4%E7%90%86/:7:0","tags":[],"title":"Shell日常使用技巧整理","uri":"/2023/06/shell%E6%97%A5%E5%B8%B8%E6%8A%80%E5%B7%A7%E6%95%B4%E7%90%86/"},{"categories":[],"content":"传参 变量 含义 $0 当前脚本的文件名 $n 传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是$1，第二个参数是$2。 $# 传递给脚本或函数的参数个数。 $* 传递给脚本或函数的所有参数。 $@ 传递给脚本或函数的所有参数。被双引号(\" “)包含时，与 $* 稍有不同，下面将会讲到。 $? 上个命令的退出状态，或函数的返回值。 $$ 当前Shell进程ID。对于 Shell 脚本，就是这些脚本所在的进程ID。 # 上一个命令的处理结果，0成功 $? # 参数个数 $# # 同上，具体参数 $1, $2, ... ","date":"2023-06-05","objectID":"/2023/06/shell%E6%97%A5%E5%B8%B8%E6%8A%80%E5%B7%A7%E6%95%B4%E7%90%86/:8:0","tags":[],"title":"Shell日常使用技巧整理","uri":"/2023/06/shell%E6%97%A5%E5%B8%B8%E6%8A%80%E5%B7%A7%E6%95%B4%E7%90%86/"},{"categories":[],"content":"注释 区块注释 echo \"start\" :\u003c\u003cBLOCK # comments echo \"not execute\" BLOCK echo \"done\" ","date":"2023-06-05","objectID":"/2023/06/shell%E6%97%A5%E5%B8%B8%E6%8A%80%E5%B7%A7%E6%95%B4%E7%90%86/:9:0","tags":[],"title":"Shell日常使用技巧整理","uri":"/2023/06/shell%E6%97%A5%E5%B8%B8%E6%8A%80%E5%B7%A7%E6%95%B4%E7%90%86/"},{"categories":[],"content":"判断变量中是否包含某字符串 str=\"this is a string\" [[ $str =~ \"this\" ]] \u0026\u0026 echo \"$str contains this\" [[ $str =~ \"that\" ]] || echo \"$str does NOT contain that\" ","date":"2023-06-05","objectID":"/2023/06/shell%E6%97%A5%E5%B8%B8%E6%8A%80%E5%B7%A7%E6%95%B4%E7%90%86/:10:0","tags":[],"title":"Shell日常使用技巧整理","uri":"/2023/06/shell%E6%97%A5%E5%B8%B8%E6%8A%80%E5%B7%A7%E6%95%B4%E7%90%86/"},{"categories":[],"content":"两个文件的差集、并集 a.txt a d b c 1 b.txt 1 a 3 5 7 并集 sort -u a.txt b.txt 交集 grep -F -f a.txt b.txt | sort | uniq 差集 a-b grep -F -v -f b.txt a.txt | sort | uniq b-a grep -F -v -f a.txt b.txt | sort | uniq ","date":"2023-06-05","objectID":"/2023/06/shell%E6%97%A5%E5%B8%B8%E6%8A%80%E5%B7%A7%E6%95%B4%E7%90%86/:11:0","tags":[],"title":"Shell日常使用技巧整理","uri":"/2023/06/shell%E6%97%A5%E5%B8%B8%E6%8A%80%E5%B7%A7%E6%95%B4%E7%90%86/"},{"categories":["dev","todo"],"content":" 根据工作中的情况排出的待学习内容 ","date":"2023-06-04","objectID":"/2023/06/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/:0:0","tags":["学习计划"],"title":"持续充电，持续集成","uri":"/2023/06/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/"},{"categories":["dev","todo"],"content":"2023年计划 HCIP网络工程师 langchain | llmindex深入学习 ","date":"2023-06-04","objectID":"/2023/06/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/:1:0","tags":["学习计划"],"title":"持续充电，持续集成","uri":"/2023/06/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/"},{"categories":["dev"],"content":"一、背景 新项目使用数据表时，需要根据整个业务数据的情况，将数据进行拆分、关联。使用ER设计的好处是可以在业务结构设计角度来考虑，忽略具体的建表过程，并且可以方便的修改调整。 ","date":"2023-06-04","objectID":"/2023/06/%E6%95%B0%E6%8D%AE%E5%BA%93er%E8%AE%BE%E8%AE%A1%E4%B8%8E%E7%94%9F%E6%88%90/:1:0","tags":["ER图","数据库","mysql"],"title":"基于MySQL数据库ER设计与生成","uri":"/2023/06/%E6%95%B0%E6%8D%AE%E5%BA%93er%E8%AE%BE%E8%AE%A1%E4%B8%8E%E7%94%9F%E6%88%90/"},{"categories":["dev"],"content":"二、操作流程 使用工具：MySQL Workbench（免费） ","date":"2023-06-04","objectID":"/2023/06/%E6%95%B0%E6%8D%AE%E5%BA%93er%E8%AE%BE%E8%AE%A1%E4%B8%8E%E7%94%9F%E6%88%90/:2:0","tags":["ER图","数据库","mysql"],"title":"基于MySQL数据库ER设计与生成","uri":"/2023/06/%E6%95%B0%E6%8D%AE%E5%BA%93er%E8%AE%BE%E8%AE%A1%E4%B8%8E%E7%94%9F%E6%88%90/"},{"categories":["dev"],"content":"2.1 新建 a) 新建Model b) 新建EER ","date":"2023-06-04","objectID":"/2023/06/%E6%95%B0%E6%8D%AE%E5%BA%93er%E8%AE%BE%E8%AE%A1%E4%B8%8E%E7%94%9F%E6%88%90/:2:1","tags":["ER图","数据库","mysql"],"title":"基于MySQL数据库ER设计与生成","uri":"/2023/06/%E6%95%B0%E6%8D%AE%E5%BA%93er%E8%AE%BE%E8%AE%A1%E4%B8%8E%E7%94%9F%E6%88%90/"},{"categories":["dev"],"content":"2.2 设计编辑 a) 添加【Table】 双击【Table】，显示表格的相关信息，可以添加字段并设置字段属性 b) 添加【外键】 外键类型为：一对一，一对多，多对多。 点击需要的类型按钮，再依次点击需要建立外键关联的两张表，可以看到两表之间生成一条关系连线。 c) 编辑【外键】 自动生成的外键（字段）可能不是我们想要的，可以手动编辑 双击外键表【Table】，点击红框【Foreign Keys】Tab，分别编辑黄框与绿框 ","date":"2023-06-04","objectID":"/2023/06/%E6%95%B0%E6%8D%AE%E5%BA%93er%E8%AE%BE%E8%AE%A1%E4%B8%8E%E7%94%9F%E6%88%90/:2:2","tags":["ER图","数据库","mysql"],"title":"基于MySQL数据库ER设计与生成","uri":"/2023/06/%E6%95%B0%E6%8D%AE%E5%BA%93er%E8%AE%BE%E8%AE%A1%E4%B8%8E%E7%94%9F%E6%88%90/"},{"categories":["dev"],"content":"2.3 生成Table 点击菜单栏【Database】-【Forward Engineer】，依次下一步即可将ER中建立的表生成到对应的数据库中。 在DBeaver中连接到该数据库后，查看ER图如下： ","date":"2023-06-04","objectID":"/2023/06/%E6%95%B0%E6%8D%AE%E5%BA%93er%E8%AE%BE%E8%AE%A1%E4%B8%8E%E7%94%9F%E6%88%90/:2:3","tags":["ER图","数据库","mysql"],"title":"基于MySQL数据库ER设计与生成","uri":"/2023/06/%E6%95%B0%E6%8D%AE%E5%BA%93er%E8%AE%BE%E8%AE%A1%E4%B8%8E%E7%94%9F%E6%88%90/"},{"categories":null,"content":" 这个家伙很懒，什么都没有留下。 ","date":"2023-06-04","objectID":"/about/:0:0","tags":null,"title":"关于我","uri":"/about/"}]